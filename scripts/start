#!/usr/bin/env bash

# This script compiles from scratch a statically compiled Linux kernel (no
# modules) including an user provided custom initramfs image


set -o pipefail


while getopts ":c:i:l:o:" opt; do
  case $opt in
    c)
      CONFIG="$OPTARG"  # Linux kernel extra configuration flags
    ;;

    i)
      INITRAM="$OPTARG"  # Tar.gz of initram image
    ;;

    l)
      LINUX="$OPTARG"  # Location of the (probably patched) Linux kernel sources
    ;;

    o)
      OUT_DIR="$OPTARG"  # Output directory
    ;;
  esac
done

if [[ -z "$OUT_DIR" ]]; then
  echo "-o is mandatory"
  exit 1
fi


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

PATH=$TOOLCHAIN/bin:$PATH


#
# Define source code paths
#

LINUX=${LINUX:-`node -p "require('nodeos-linux')"`/linux}


#
# Define steps paths
#

OBJ_DIR=/tmp/`echo $INITRAM | sed 's,/,_,g'`


#
# Build cross-compiler (if needed)
#

(
  cd $TOOLCHAIN

  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit $?
) || exit $?


#
# Configure the system
#

STEP_DIR=$OBJ_DIR

echo -e "${WHT}Compiling Linux${CLR}"

rmStep $STEP_DIR
mkdir -p $STEP_DIR

MAKE="$MAKE O=$STEP_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET-"

(
  cd $LINUX

  # Configure
  $MAKE1 mrproper || exit 10

  case $MACHINE in
    pc)
      DEFCONFIG=${CPU_FAMILY}_defconfig
    ;;

    raspi)
      DEFCONFIG=bcm2835_defconfig
    ;;

    raspi2)
      #DEFCONFIG=bcm2709_defconfig
      DEFCONFIG=bcm2835_defconfig
      #DEFCONFIG=bcm2836_defconfig
    ;;

    raspi3)
      DEFCONFIG=bcm2837_defconfig
    ;;

    *)
      echo "Unknown MACHINE '$MACHINE'"
      exit 11
    ;;
  esac

  $MAKE $DEFCONFIG || exit 12
) || err $?

# Set custom configurations
eval "echo \"$(< resources/config)\"" >> $STEP_DIR/.config || err 13

if [[ $CONFIG ]]; then
  eval "echo \"$(< $CONFIG)\"" >> $STEP_DIR/.config || err 14
fi

(
  cd $LINUX

  # Fix and clean configuration
  $MAKE oldnoconfig || exit 15

  # Compile
  $MAKE || exit 16
) || err $?

echo -e "${GRN}Successfully compiled Linux${CLR}"


#
# Copy the compiled kernel
#

mkdir -p $OUT_DIR || exit 20

BOOT=$OBJ_DIR/arch/$ARCH/boot

case $MACHINE in
  pc)
    cp $BOOT/bzImage $OUT_DIR || exit 21
  ;;

  raspi|raspi2|raspi3)
    cp $BOOT/zImage $OUT_DIR || exit 22

    mkdir -p $OUT_DIR/dts           &&
    cp $BOOT/dts/*.dtb $OUT_DIR/dts || exit 23
  ;;

  *)
    echo "Unknown MACHINE '$MACHINE'"
    exit 24
  ;;
esac


#
# Remove build stage files
#

rmStep $OBJ_DIR || true
