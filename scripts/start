#!/usr/bin/env bash

# This script compiles from scratch a statically compiled Linux kernel (no
# modules) including an user provided custom initramfs image


set -o pipefail


# http://www.daveeddy.com/2015/04/13/dirname-case-study-for-bash-and-node/
__dirname() {
  local prog=${BASH_SOURCE[0]}
  [[ -n $prog ]] || return 1

  # resolve symlinks (of script)
  while [[ -L $prog ]]; do
    local rl=$(readlink "$prog")
    # readlink(1) is not portable, so assert it exits 0 and also returns
    # non-empty string
    if (($? != 0)) || [[ -z $rl ]]; then
      return 1
    fi

    # symlinks can be relative, in which case make them "relative" to the
    # original program dirname
    if [[ ${rl:0:1} == '/' ]]; then
      prog=$rl
    else
      prog=$(dirname "$prog")/$rl
    fi
  done

  # resolve the dir
  (CDPATH= cd "$(dirname "$prog")" && pwd)
}
__dirname=$(__dirname)


while getopts ":c:i:l:o:" opt; do
  case $opt in
    c)
      CONFIG="$OPTARG"  # Linux kernel extra configuration flags
    ;;

    i)
      INITRAM="$OPTARG"  # Tar.gz of initram image
    ;;

    l)
      LINUX="$OPTARG"  # Location of the (probably patched) Linux kernel sources
    ;;

    o)
      OUT_DIR="$OPTARG"  # Output directory
    ;;
  esac
done

if [[ -z "$OUT_DIR" ]]; then
  OUT_DIR="`pwd`"
fi


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

PATH=$TOOLCHAIN/bin:$PATH


#
# Define source code paths
#

LINUX=${LINUX:-`node -p "require('nodeos-linux')"`/linux}


#
# Create objects path
# Based on https://stackoverflow.com/a/34676160/586382
#

OBJ_DIR=`mktemp -d`

# check if tmp dir was created
if [[ ! "$OBJ_DIR" || ! -d "$OBJ_DIR" ]]; then
  echo "Could not create temp dir"
  exit 1
fi

# deletes the temp directory
function cleanup {
  rm -rf $OBJ_DIR
}

# register the cleanup function to be called on the EXIT signal
trap cleanup EXIT


#
# Build cross-compiler (if needed)
#

(
  cd $TOOLCHAIN

  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit $?
) || exit $?


#
# Configure the system
#

echo -e "${WHT}Compiling Linux${CLR}"

MAKE="$MAKE O=$OBJ_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET-"

(
  cd $LINUX

  # Configure
  $MAKE1 mrproper || exit 10

  case $MACHINE in
    pc)
      DEFCONFIG=${CPU_FAMILY}_defconfig
    ;;

    raspi)
      DEFCONFIG=bcm2835_defconfig
    ;;

    raspi2)
      #DEFCONFIG=bcm2709_defconfig
      DEFCONFIG=bcm2835_defconfig
      #DEFCONFIG=bcm2836_defconfig
    ;;

    raspi3)
      DEFCONFIG=bcm2837_defconfig
    ;;

    *)
      echo "Unknown MACHINE '$MACHINE'"
      exit 11
    ;;
  esac

  $MAKE $DEFCONFIG || exit 12
) || exit $?

# Set custom configurations
eval "echo \"$(< $__dirname/../resources/config)\"" >> $OBJ_DIR/.config || exit 13

if [[ $CONFIG ]]; then
  eval "echo \"$(< $CONFIG)\"" >> $OBJ_DIR/.config || exit 14
fi

(
  cd $LINUX

  # Fix and clean configuration
  $MAKE oldnoconfig || exit 15

  # Compile
  $MAKE || exit 16
) || exit $?

echo -e "${GRN}Successfully compiled Linux${CLR}"


#
# Copy the compiled kernel
#

mkdir -p $OUT_DIR || exit 20

BOOT=$OBJ_DIR/arch/$ARCH/boot

case $MACHINE in
  pc)
    cp $BOOT/bzImage $OUT_DIR || exit 21
  ;;

  raspi|raspi2|raspi3)
    cp $BOOT/zImage $OUT_DIR || exit 22

    mkdir -p $OUT_DIR/dts           &&
    cp $BOOT/dts/*.dtb $OUT_DIR/dts || exit 23
  ;;

  *)
    echo "Unknown MACHINE '$MACHINE'"
    exit 24
  ;;
esac
