#!/usr/bin/env node

const {spawn} = require('child_process')
const {mkdtempSync} = require('fs')
const {tmpdir} = require('os')
const {sep} = require('path')

const suppose = require('suppose')

const processArguments = require('./processArguments')


// Create temporaty file
const tmp = mkdtempSync(`${tmpdir()}${sep}`)


// Compile a BarebonesOS linux kernel

spawn('npm', ['start', '--', '-o', tmp], {stdio: 'inherit'})
.on('exit', function(code, signal)
{
  code = code || signal

  if(code) return process.exit(code)


  // Check the kernel boots

  const QEMU_SYSTEM = require('qemu')+'/bin/qemu-system-'
  const TIMEOUT = 30


  const {cpu, cpu_family, machine} = processArguments(process.argv.slice(2))

  const timeout = setTimeout(function()
  {
    exe.kill()

    console.error('Timeout while waiting an answer')
    process.exit(-2)
  }, TIMEOUT*1000)


  const command = QEMU_SYSTEM+cpu_family

  const args =
  [
  //  '-enable-kvm',  // Give problems running inside VMs, like Travis-CI
    '-nographic',
    '--kernel', `${tmp}/bzImage`,
    '-append',  'console=ttyS0'
  ]

  if(machine) args.unshift('-machine', machine)

  const exe = suppose(command, args, {debug: true})
    .when(/end Kernel panic - not syncing: VFS: Unable to mount/, function(exe)
    {
      exe.kill()
    })
    .on('error', function(error)
    {
      if(error.message.indexOf('terminating on signal 15 from pid') < 0)
      {
        console.trace(error)
        process.exit(error.code)
      }
    })
    .end(function()
    {
      clearTimeout(timeout)

      var expects = this.expects.length
      if(expects) process.exit(expects)
    })
})
